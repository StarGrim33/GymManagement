// <auto-generated />
using System;
using GymManagement.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GymManagement.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250125122754_Create_Database")]
    partial class Create_Database
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GymManagement.Domain.Entities.Gyms.Gym", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.HasKey("Id")
                        .HasName("pk_gym");

                    b.ToTable("gym", (string)null);
                });

            modelBuilder.Entity("GymManagement.Domain.Entities.Gyms.GymAmenity", b =>
                {
                    b.Property<Guid>("GymId")
                        .HasColumnType("uuid")
                        .HasColumnName("gym_id");

                    b.Property<string>("Amenity")
                        .HasColumnType("text")
                        .HasColumnName("amenity");

                    b.HasKey("GymId", "Amenity")
                        .HasName("pk_gym_amenities");

                    b.ToTable("gym_amenities", (string)null);
                });

            modelBuilder.Entity("GymManagement.Domain.Entities.Gyms.GymEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<string>("EquipmentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("equipment_type");

                    b.Property<Guid>("GymId")
                        .HasColumnType("uuid")
                        .HasColumnName("gym_id");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_available");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_gym_equipment");

                    b.HasIndex("GymId")
                        .HasDatabaseName("ix_gym_equipment_gym_id");

                    b.ToTable("gym_equipment", (string)null);
                });

            modelBuilder.Entity("GymManagement.Domain.Entities.Invoices.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("invoice_date");

                    b.Property<Guid>("MembershipId")
                        .HasColumnType("uuid")
                        .HasColumnName("membership_id");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("payment_date");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_status");

                    b.HasKey("Id")
                        .HasName("pk_invoices");

                    b.HasIndex("MembershipId")
                        .HasDatabaseName("ix_invoices_membership_id");

                    b.ToTable("invoices", (string)null);
                });

            modelBuilder.Entity("GymManagement.Domain.Entities.Memberships.Membership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<Guid>("GymId")
                        .HasColumnType("uuid")
                        .HasColumnName("gym_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("MembershipStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("membership_status");

                    b.Property<Guid>("MembershipTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("membership_type_id");

                    b.Property<decimal>("PriceAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("price_amount");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_memberships");

                    b.HasIndex("GymId")
                        .HasDatabaseName("ix_memberships_gym_id");

                    b.HasIndex("MembershipTypeId")
                        .HasDatabaseName("ix_memberships_membership_type_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_memberships_user_id");

                    b.ToTable("memberships", (string)null);
                });

            modelBuilder.Entity("GymManagement.Domain.Entities.Memberships.MembershipTypes.MembershipType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval")
                        .HasColumnName("duration");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("pk_membership_type");

                    b.ToTable("membership_type", (string)null);
                });

            modelBuilder.Entity("GymManagement.Domain.Entities.Trainers.Trainer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Bio")
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<Guid>("GymId")
                        .HasColumnType("uuid")
                        .HasColumnName("gym_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Specialization")
                        .HasColumnType("text")
                        .HasColumnName("specialization");

                    b.HasKey("Id")
                        .HasName("pk_trainers");

                    b.HasIndex("GymId")
                        .HasDatabaseName("ix_trainers_gym_id");

                    b.ToTable("trainers", (string)null);
                });

            modelBuilder.Entity("GymManagement.Domain.Entities.Trainers.TrainingSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<Guid>("GymId")
                        .HasColumnType("uuid")
                        .HasColumnName("gym_id");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_canceled");

                    b.Property<string>("Room")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("room");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<Guid>("TrainerId")
                        .HasColumnType("uuid")
                        .HasColumnName("trainer_id");

                    b.Property<string>("TrainingType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("training_type");

                    b.HasKey("Id")
                        .HasName("pk_training_sessions");

                    b.HasIndex("GymId")
                        .HasDatabaseName("ix_training_sessions_gym_id");

                    b.HasIndex("TrainerId")
                        .HasDatabaseName("ix_training_sessions_trainer_id");

                    b.ToTable("training_sessions", (string)null);
                });

            modelBuilder.Entity("GymManagement.Domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("UserTrainingSession", b =>
                {
                    b.Property<Guid>("TrainingSessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("training_session_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("TrainingSessionId", "UserId")
                        .HasName("pk_user_training_session");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_training_session_user_id");

                    b.ToTable("user_training_session", (string)null);
                });

            modelBuilder.Entity("GymManagement.Domain.Entities.Gyms.Gym", b =>
                {
                    b.OwnsOne("GymManagement.Domain.Entities.Description", "Description", b1 =>
                        {
                            b1.Property<Guid>("GymId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("description");

                            b1.HasKey("GymId");

                            b1.ToTable("gym");

                            b1.WithOwner()
                                .HasForeignKey("GymId")
                                .HasConstraintName("fk_gym_gym_id");
                        });

                    b.OwnsOne("GymManagement.Domain.Entities.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("GymId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("city");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("zip_code");

                            b1.HasKey("GymId");

                            b1.ToTable("gym");

                            b1.WithOwner()
                                .HasForeignKey("GymId")
                                .HasConstraintName("fk_gym_gym_id");
                        });

                    b.OwnsOne("GymManagement.Domain.Entities.Gyms.Schedule", "Schedule", b1 =>
                        {
                            b1.Property<Guid>("GymId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("schedule");

                            b1.HasKey("GymId");

                            b1.ToTable("gym");

                            b1.WithOwner()
                                .HasForeignKey("GymId")
                                .HasConstraintName("fk_gym_gym_id");
                        });

                    b.OwnsOne("GymManagement.Domain.Entities.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("GymId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("name");

                            b1.HasKey("GymId");

                            b1.ToTable("gym");

                            b1.WithOwner()
                                .HasForeignKey("GymId")
                                .HasConstraintName("fk_gym_gym_id");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Schedule")
                        .IsRequired();
                });

            modelBuilder.Entity("GymManagement.Domain.Entities.Gyms.GymAmenity", b =>
                {
                    b.HasOne("GymManagement.Domain.Entities.Gyms.Gym", "Gym")
                        .WithMany("GymAmenities")
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_gym_amenities_gym_gym_id");

                    b.Navigation("Gym");
                });

            modelBuilder.Entity("GymManagement.Domain.Entities.Gyms.GymEquipment", b =>
                {
                    b.HasOne("GymManagement.Domain.Entities.Gyms.Gym", "Gym")
                        .WithMany("Equipment")
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_gym_equipment_gym_gym_id");

                    b.Navigation("Gym");
                });

            modelBuilder.Entity("GymManagement.Domain.Entities.Invoices.Invoice", b =>
                {
                    b.HasOne("GymManagement.Domain.Entities.Memberships.Membership", "Membership")
                        .WithMany("Invoices")
                        .HasForeignKey("MembershipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_invoices_membership_membership_id");

                    b.Navigation("Membership");
                });

            modelBuilder.Entity("GymManagement.Domain.Entities.Memberships.Membership", b =>
                {
                    b.HasOne("GymManagement.Domain.Entities.Gyms.Gym", "Gym")
                        .WithMany("Memberships")
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_memberships_gym_gym_id");

                    b.HasOne("GymManagement.Domain.Entities.Memberships.MembershipTypes.MembershipType", "MembershipType")
                        .WithMany("Memberships")
                        .HasForeignKey("MembershipTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_memberships_membership_type_membership_type_id");

                    b.HasOne("GymManagement.Domain.Entities.Users.User", "User")
                        .WithMany("Memberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_memberships_user_user_id");

                    b.Navigation("Gym");

                    b.Navigation("MembershipType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GymManagement.Domain.Entities.Trainers.Trainer", b =>
                {
                    b.HasOne("GymManagement.Domain.Entities.Gyms.Gym", "Gym")
                        .WithMany("Trainers")
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_trainers_gym_gym_id");

                    b.Navigation("Gym");
                });

            modelBuilder.Entity("GymManagement.Domain.Entities.Trainers.TrainingSession", b =>
                {
                    b.HasOne("GymManagement.Domain.Entities.Gyms.Gym", "Gym")
                        .WithMany("TrainingSessions")
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_training_sessions_gym_gym_id");

                    b.HasOne("GymManagement.Domain.Entities.Trainers.Trainer", "Trainer")
                        .WithMany("TrainingSessions")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_training_sessions_trainers_trainer_id");

                    b.Navigation("Gym");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("GymManagement.Domain.Entities.Users.User", b =>
                {
                    b.OwnsOne("GymManagement.Domain.Entities.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("city");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("zip_code");

                            b1.HasKey("UserId");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_users_users_id");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("UserTrainingSession", b =>
                {
                    b.HasOne("GymManagement.Domain.Entities.Trainers.TrainingSession", null)
                        .WithMany()
                        .HasForeignKey("TrainingSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_training_session_training_sessions_training_session_id");

                    b.HasOne("GymManagement.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_training_session_user_user_id");
                });

            modelBuilder.Entity("GymManagement.Domain.Entities.Gyms.Gym", b =>
                {
                    b.Navigation("Equipment");

                    b.Navigation("GymAmenities");

                    b.Navigation("Memberships");

                    b.Navigation("Trainers");

                    b.Navigation("TrainingSessions");
                });

            modelBuilder.Entity("GymManagement.Domain.Entities.Memberships.Membership", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("GymManagement.Domain.Entities.Memberships.MembershipTypes.MembershipType", b =>
                {
                    b.Navigation("Memberships");
                });

            modelBuilder.Entity("GymManagement.Domain.Entities.Trainers.Trainer", b =>
                {
                    b.Navigation("TrainingSessions");
                });

            modelBuilder.Entity("GymManagement.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("Memberships");
                });
#pragma warning restore 612, 618
        }
    }
}
